<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fable.PowerPack</name></assembly>
<members>
<member name="T:Fable.PowerPack.PromiseSeqInner`1">
<summary>
 The interanl type that represents a value returned as a result of
 evaluating a step of an asynchronous sequence
</summary>
</member>
<member name="T:Fable.PowerPack.PromiseSeq`1">
<summary>
 An asynchronous sequence represents a delayed computation that can be
 started to produce either Cons value consisting of the next element of the
 sequence (head) together with the next asynchronous sequence (tail) or a
 special value representing the end of the sequence (Nil)
</summary>
</member>
<member name="M:Fable.PowerPack.Promise.either``3(Microsoft.FSharp.Core.FSharpFunc{``0,Fable.Core.U2{``1,Fable.Import.JS.Promise{``1}}},Microsoft.FSharp.Core.FSharpFunc{``2,Fable.Core.U2{``1,Fable.Import.JS.Promise{``1}}},Fable.Import.JS.Promise{``0})">
<summary>
 A combination of `map/bind` and `catch/catchBind`, this function applies the `success` continuation when the input promise resolves successfully, or `fail` continuation when the input promise fails. Both continuations may return either naked value `&apos;R` or another promise `Promise&lt;&apos;R&gt;`. Use the erased-cast operator `!^` to cast values when returning, for example:
 ```
 somePromise |&gt; Promise.either (fun x -&gt; !^(string x)) (fun err -&gt; ^!(Promise.lift err.Message))
 ```
</summary>
</member>
<member name="M:Fable.PowerPack.Promise.catchEnd``1(Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Fable.Import.JS.Promise{``0})">
<summary>
 Used to catch errors at the end of a promise chain.
</summary>
</member>
<member name="M:Fable.PowerPack.Promise.catchBind``1(Microsoft.FSharp.Core.FSharpFunc{System.Exception,Fable.Import.JS.Promise{``0}},Fable.Import.JS.Promise{``0})">
<summary>
 This is a version of `catch` that fakes a function returning Promise&lt;&apos;T&gt; as opposed to just &apos;T. If you need to return just &apos;T, use `catch`.
</summary>
</member>
<member name="M:Fable.PowerPack.Promise.catch``1(Microsoft.FSharp.Core.FSharpFunc{System.Exception,``0},Fable.Import.JS.Promise{``0})">
<summary>
 This version of `catch` fakes a function returning just &apos;T, as opposed to `Promise&lt;&apos;T&gt;`. If you need to return `Promise&lt;&apos;T&gt;`, use `catchBind`.
</summary>
</member>
<member name="M:Fable.PowerPack.Promise.create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}})">
<summary>
 The promise function receives two other function parameters: success and fail
</summary>
</member>
<member name="M:Fable.PowerPack.Fetch.tryOptionsRequest(System.String)">
<summary>
 Sends a HTTP OPTIONS request.
</summary>
</member>
<member name="M:Fable.PowerPack.Fetch.patchRecord``1(System.String,``0,Microsoft.FSharp.Collections.FSharpList{Fable.PowerPack.Fetch.Fetch_types.RequestProperties})">
<summary>
 Sends a HTTP patch with the record serialized as JSON.
 This function already sets the HTTP Method to PATCH sets the json into the body.
</summary>
</member>
<member name="M:Fable.PowerPack.Fetch.putRecord``1(System.String,``0,Microsoft.FSharp.Collections.FSharpList{Fable.PowerPack.Fetch.Fetch_types.RequestProperties})">
<summary>
 Sends a HTTP put with the record serialized as JSON.
 This function already sets the HTTP Method to PUT, sets the json into the body.
</summary>
</member>
<member name="M:Fable.PowerPack.Fetch.postRecord``1(System.String,``0,Microsoft.FSharp.Collections.FSharpList{Fable.PowerPack.Fetch.Fetch_types.RequestProperties})">
<summary>
 Sends a HTTP post with the record serialized as JSON.
 This function already sets the HTTP Method to POST sets the json into the body.
</summary>
</member>
<member name="M:Fable.PowerPack.Fetch.fetch(System.String,Microsoft.FSharp.Collections.FSharpList{Fable.PowerPack.Fetch.Fetch_types.RequestProperties})">
<summary>
 Retrieves data from the specified resource.
</summary>
</member>
<member name="T:Fable.PowerPack.Fetch.Fetch_types.RequestInfo.Req">
<summary>
 Uses a Request object as request info
</summary>
</member>
<member name="T:Fable.PowerPack.Fetch.Fetch_types.RequestInfo.Url">
<summary>
 Uses a simple Url as string to create the request info
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Response.Url">
<summary>
 Returns the response URL
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Response.StatusText">
<summary>
 Returns the HTTP status message
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Response.Status">
<summary>
 Returns the HTTP status code
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Response.Ok">
<summary>
 Verifies that the fetch was successful
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Response.Headers">
<summary>
 Returns the headers objct
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.XXSSProtection">
<summary>
 Cross-site scripting (XSS) filter
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.XUACompatible">
<summary>
 Recommends the preferred rendering engine (often a backward-compatibility mode) to use to display the content. Also used to activate Chrome Frame in Internet Explorer.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.XRequestID">
<summary>
 Correlates HTTP requests between a client and server.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.XPoweredBy">
<summary>
 Specifies the technology (e.g. ASP.NET, PHP, JBoss) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.XFrameOptions">
<summary>
 Clickjacking protection: deny - no rendering within a frame, sameorigin - no rendering if origin mismatch, allow-from - allow from specified location, allowall - non-standard, allow from any location
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.XCorrelationID">
<summary>
 Correlates HTTP requests between a client and server.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.XContentTypeOptions">
<summary>
 The only defined value, &quot;nosniff&quot;, prevents Internet Explorer from MIME-sniffing a response away from the declared content-type. This also applies to Google Chrome, when downloading extensions
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.XContentDuration">
<summary>
 Provide the duration of the audio or video in seconds; only supported by Gecko browsers
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Warning">
<summary>
 A general warning about possible problems with the entity body.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.WWWAuthenticate">
<summary>
 Indicates the authentication scheme that should be used to access the requested entity.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Via">
<summary>
 Informs the client of proxies through which the response was sent.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Vary">
<summary>
 Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.UpgradeInsecureRequests">
<summary>
 Tells a server which (presumably in the middle of a HTTP -&gt; HTTPS migration) hosts mixed content that the client would prefer redirection to HTTPS and can handle Content-Security-Policy: upgrade-insecure-requests
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Upgrade">
<summary>
 Ask the client to upgrade to another protocol.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.TransferEncoding">
<summary>
 The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Trailer">
<summary>
 The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer coding.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.TSV">
<summary>
 Tracking Status Value, value suggested to be sent in response to a DNT(do-not-track)
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.StrictTransportSecurity">
<summary>
 A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Status">
<summary>
 CGI header field specifying the status of the HTTP response. Normal HTTP responses use a separate &quot;Status-Line&quot; instead, defined by RFC 7230
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.SetCookie">
<summary>
 An HTTP cookie
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Server">
<summary>
 A name for the server
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.RetryAfter">
<summary>
 If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Refresh">
<summary>
 Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.PublicKeyPins">
<summary>
 HTTP Public Key Pinning, announces hash of website&apos;s authentic TLS certificate
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ProxyAuthenticate">
<summary>
 Request authentication to access the proxy.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Pragma">
<summary>
 Implementation-specific fields that may have various effects anywhere along the request-response chain.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.P3P">
<summary>
 This field is supposed to set P3P policy, in the form of P3P:CP=&quot;your_compact_policy&quot;.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Location">
<summary>
 Used in redirection, or when a new resource has been created.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Link">
<summary>
 Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.LastModified">
<summary>
 The last modified date for the requested object (in &quot;HTTP-date&quot; format as defined by RFC 7231)
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Expires">
<summary>
 Gives the date/time after which the response is considered stale (in &quot;HTTP-date&quot; format as defined by RFC 7231)
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ETag">
<summary>
 An identifier for a specific version of a resource, often a message digest
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Date">
<summary>
 The date and time that the message was sent (in &quot;HTTP-date&quot; format as defined by RFC 7231)
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentType">
<summary>
 The MIME type of this content
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentSecurityPolicy">
<summary>
 Content Security Policy definition.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentRange">
<summary>
 Where in a full body message this partial message belongs
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentMD5">
<summary>
 A Base64-encoded binary MD5 sum of the content of the response
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentLocation">
<summary>
 An alternate location for the returned data
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentLength">
<summary>
 The length of the response body in octets (8-bit bytes)
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentLanguage">
<summary>
 The natural language or languages of the intended audience for the enclosed content
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentEncoding">
<summary>
 The type of encoding used on the data
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.ContentDisposition">
<summary>
 An opportunity to raise a &quot;File Download&quot; dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters.
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Connection">
<summary>
 Control options for the current connection and list of hop-by-hop response fields
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.CacheControl">
<summary>
 Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.AltSvc">
<summary>
 A server uses &quot;Alt-Svc&quot; header (meaning Alternative Services) to indicate that its resources can also be accessed at a different network location (host or port) or using a different protocol
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Allow">
<summary>
 Valid actions for a specified resource. To be used for a 405 Method not allowed
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.Age">
<summary>
 The age the object has been in a proxy cache in seconds
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.AccessControlAllowOrigin">
<summary>
 Specifying which web sites can participate in cross-origin resource sharing
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.AcceptRanges">
<summary>
 What partial content range types this server supports via byte serving
</summary>
</member>
<member name="P:Fable.PowerPack.Fetch.Fetch_types.Headers.AcceptPatch">
<summary>
 Specifies which patch document formats this server supports
</summary>
</member>
<member name="T:Fable.PowerPack.Fetch">
<summary>
 The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses.
 It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.PromiseSeqBuilder.For``2(Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}},Microsoft.FSharp.Core.FSharpFunc{``0,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``1}}})">
<summary>
 Asynchronous for loop - for all elements from the input sequence,
 generate all elements produced by the body (asynchronously). See
 also the PromiseSeq.collect function.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.PromiseSeqBuilder.For``2(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``1}}})">
<summary>
 For loop that iterates over a synchronous sequence (and generates
 all elements generated by the asynchronous body)
</summary>
</member>
<member name="T:Fable.PowerPack.PromiseSeqModule.PromiseSeqBuilder">
<summary>
 Computation builder that allows creating of asynchronous
 sequences using the &apos;promiseSeq { ... }&apos; syntax
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.skip``1(System.Int32,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Skips the first N elements of an asynchronous sequence and
 then returns the rest of the sequence unmodified.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.take``1(System.Int32,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Returns the first N elements of an asynchronous sequence
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.skipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Skips elements from an asynchronous sequence while the specified
 predicate holds and then returns the rest of the sequence. The
 predicate is evaluated asynchronously.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.takeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Returns elements from an asynchronous sequence while the specified
 predicate holds. The predicate is evaluated synchronously.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.skipWhileAsync``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Skips elements from an asynchronous sequence while the specified
 predicate holds and then returns the rest of the sequence. The
 predicate is evaluated asynchronously.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.takeWhileAsync``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Returns elements from an asynchronous sequence while the specified
 predicate holds. The predicate is evaluated asynchronously.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Same as PromiseSeq.filterAsync, but the specified predicate is synchronous
 and processes the input element immediately.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Same as PromiseSeq.chooseAsync, but the specified function is synchronous
 and processes the input element immediately.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.iter``1(Microsoft.FSharp.Core.FSharpFunc{Fable.PowerPack.PromiseSeqInner{``0},Microsoft.FSharp.Core.Unit},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Same as PromiseSeq.iterAsync, but the specified function is synchronous
 and performs the side-effect immediately.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Same as PromiseSeq.mapAsync, but the specified function is synchronous
 and returns the result of projection immediately.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.scan``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``1}})">
<summary>
 Same as PromiseSeq.scanAsync, but the specified function is synchronous
 and returns the result of aggregation immediately.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.fold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``1}})">
<summary>
 Same as PromiseSeq.foldAsync, but the specified function is synchronous
 and returns the result of aggregation immediately.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.foldAsync``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``1}})">
<summary>
 Aggregates the elements of the input asynchronous sequence using the
 specified &apos;aggregation&apos; function. The result is an asynchronous
 workflow that returns the final result.

 The aggregation function is asynchronous (and the input sequence will
 be asked for the next element after the processing of an element completes).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.pairwise``1(Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Returns an asynchronous sequence that returns pairs containing an element
 from the input sequence and its predecessor. Empty sequence is returned for
 singleton input sequence.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.iterAsync``2(Microsoft.FSharp.Core.FSharpFunc{Fable.PowerPack.PromiseSeqInner{``0},``1},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Iterates over the input sequence and calls the specified function for
 every value (to perform some side-effect asynchronously).

 The specified function is asynchronous (and the input sequence will
 be asked for the next element after the processing of an element completes).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.scanAsync``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``1}})">
<summary>
 Aggregates the elements of the input asynchronous sequence using the
 specified &apos;aggregation&apos; function. The result is an asynchronous
 sequence of intermediate aggregation result.

 The aggregation function is asynchronous (and the input sequence will
 be asked for the next element after the processing of an element completes).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.firstOrDefault``1(``0,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Asynchronously returns the first element that was generated by the
 given asynchronous sequence (or the specified default value).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.lastOrDefault``1(``0,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Asynchronously returns the last element that was generated by the
 given asynchronous sequence (or the specified default value).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.filterAsync``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Builds a new asynchronous sequence whose elements are those from the
 input sequence for which the specified function returned true.

 The specified function is asynchronous (and the input sequence will
 be asked for the next element after the processing of an element completes).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.chooseAsync``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Asynchronously iterates over the input sequence and generates &apos;x&apos; for
 every input element for which the specified asynchronous function
 returned &apos;Some(x)&apos;

 The specified function is asynchronous (and the input sequence will
 be asked for the next element after the processing of an element completes).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.mapAsync``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Builds a new asynchronous sequence whose elements are generated by
 applying the specified function to all elements of the input sequence.

 The specified function is asynchronous (and the input sequence will
 be asked for the next element after the processing of an element completes).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Creates an asynchronou sequence that iterates over the given input sequence.
 For every input element, it calls the the specified function and iterates
 over all elements generated by that asynchronous sequence.
 This is the &apos;bind&apos; operation of the computation expression (exposed using
 the &apos;for&apos; keyword in promiseSeq computation).
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.tryFinally``1(Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Implements the &apos;TryFinally&apos; functionality for computation builder
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.tryWith``1(Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}}})">
<summary>
 Implements the &apos;TryWith&apos; functionality for computation builder
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.tryNext``1(Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Tries to get the next element of an asynchronous sequence
 and returns either the value or an exception
</summary>
</member>
<member name="P:Fable.PowerPack.PromiseSeqModule.promiseSeq">
<summary>
 Builds an asynchronou sequence using the computation builder syntax
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.append``1(Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}},Fable.Import.JS.Promise{Fable.PowerPack.PromiseSeqInner{``0}})">
<summary>
 Yields all elements of the first asynchronous sequence and then
 all elements of the second asynchronous sequence.
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.singleton``1(``0)">
<summary>
 Creates an asynchronous sequence that generates a single element and then ends
</summary>
</member>
<member name="M:Fable.PowerPack.PromiseSeqModule.empty``1">
<summary>
 Creates an empty asynchronou sequence that immediately ends
</summary>
</member>
<member name="T:Fable.PowerPack.PromiseSeqModule">
<summary>
 Module with helper functions for working with asynchronous sequences
</summary>
</member>
<member name="P:Fable.PowerPack.PromiseSeqExtensions.promiseSeq">
<summary>
 Builds an asynchronou sequence using the computation builder syntax
</summary>
</member>
<member name="T:Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection.PrevUnique">
<summary>
 This direction causes the cursor to be opened at the end of the source.
 When iterated, the cursor should not yield records with the same key, but otherwise yield all records, in monotonically decreasing order of keys.
 For every key with duplicate values, only the first record is yielded.
 When the source is an object store or a unique index, this direction has the exact same behavior as Prev.
</summary>
</member>
<member name="T:Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection.Prev">
<summary>
 This direction causes the cursor to be opened at the end of the source.
 When iterated, the cursor should yield all records, including duplicates, in monotonically decreasing order of keys.
</summary>
</member>
<member name="T:Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection.NextUnique">
<summary>
 This direction causes the cursor to be opened at the start of the source.
 When iterated, the cursor should not yield records with the same key, but otherwise yield all records, in monotonically increasing order of keys.
 For every key with duplicate values, only the first record is yielded.
 When the source is an object store or a unique index, this direction has the exact same behavior as Next.
</summary>
</member>
<member name="T:Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection.Next">
<summary>
 This direction causes the cursor to be opened at the start of the source.
 When iterated, the cursor should yield all records, including duplicates, in monotonically increasing order of keys.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.IDBObjectStore.putAsync``1(Fable.Import.Browser.IDBObjectStore,``0)">
<summary>
 Update or insert method. It can be used in promise workflows. The return value is key set for the stored record.
 Note the continuation is called when the operation is added to the queue, but you still need to wait for the transaction to complete.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.IDBObjectStore.clearAsync(Fable.Import.Browser.IDBObjectStore)">
<summary>
 Delete all items in the store. It can be used in promise workflows.
 Note the continuation is called when the operation is added to the queue, but you still need to wait for the transaction to complete.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.IDBObjectStore.deleteAsync(Fable.Import.Browser.IDBObjectStore,System.Object)">
<summary>
 Delete the item specified by the key. It can be used in promise workflows.
 Note the continuation is called when the operation is added to the queue, but you still need to wait for the transaction to complete.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.IDBObjectStore.addAsync``1(Fable.Import.Browser.IDBObjectStore,``0)">
<summary>
 Insert only method. It can be used in promise workflows. The return value is key set for the stored record.
 Note the continuation is called when the operation is added to the queue, but you still need to wait for the transaction to complete.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.IDBObjectStore.openCursorAsync``1(Fable.Import.Browser.IDBObjectStore,Microsoft.FSharp.Core.FSharpOption{Fable.Import.Browser.IDBKeyRange},Microsoft.FSharp.Core.FSharpOption{Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection},Microsoft.FSharp.Core.FSharpOption{System.UInt32})">
<summary>
 If no range is passed, it will default to a key range that selects all the records in this object store.
 If no direction is passed, it will default to &quot;next&quot;.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.getKeyFirstAsync(Fable.Import.Browser.IDBKeyRange,Fable.Import.Browser.IDBIndex)">
<summary>
 The parameter should not target the object primary key, but the property used by the index.
 The return value is the object actual primary key.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.getKeyAsync(System.Object,Fable.Import.Browser.IDBIndex)">
<summary>
 The parameter should not target the object primary key, but the property used by the index.
 The return value is the object actual primary key.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.getFirstAsync``1(Fable.Import.Browser.IDBKeyRange,Fable.Import.Browser.IDBIndex)">
<summary>
 The parameter should not target the object primary key, but the property used by the index.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.getAsync``2(``0,Fable.Import.Browser.IDBIndex)">
<summary>
 The parameter should not target the object primary key, but the property used by the index.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.countRangeAsync(Fable.Import.Browser.IDBKeyRange,Fable.Import.Browser.IDBIndex)">
<summary>
 The parameter should not target the object primary key, but the property used by the index.
</summary>
</member>
<member name="M:Fable.PowerPack.Experimental.IndexedDB.countKeyAsync``1(``0,Fable.Import.Browser.IDBIndex)">
<summary>
 The parameter should not target the object primary key, but the property used by the index.
</summary>
</member>
</members>
</doc>
